class SATSolver {
    constructor() {
        this.clauses = [];
        this.queryClauses = [];
    }


    static get TRUE() {
        return 1;
    }

    static get UNKNOWN() {
        return 0;
    }

    static get FALSE() {
        return -1;
    }

    addClause(clause) {
        this.clauses.push(clause);
    }

    clearClauses() {
        this.clauses = [];
    }

    addQueryClause(clause) {
        this.queryClauses.push(clause);
    }

    clearQueryClauses() {
        this.queryClauses = [];
    }

    makeQuery() {
        let maxVar = 0;
        let allClauses = this.clauses.concat(this.queryClauses);
        for (let i = 0; i < allClauses.length; i++) {
            let clause = allClauses[i];
            for (let j = 0; j < clause.length; j++) {
                let literal = clause[j];
                maxVar = Math.max(Math.abs(literal), maxVar);
            }
        }
        console.log("c This DIMACS format CNF file was generated by SatSolver.java");
        console.log("c Do not edit.");
        console.log("p cnf " + maxVar + " " + allClauses.length);
        for (let i = 0; i < allClauses.length; i++) {
            let clause = allClauses[i];
            let str = "";
            for (let j = 0; j < clause.length; j++) {
                let literal = clause[j];
                str += literal + " ";
            }
            console.log(str, "0");

        }
        return true;
    }

    testLiteral(literal) {
        let result = SATSolver.UNKNOWN;
        this.clearQueryClauses();
        let clauseT = [literal];
        this.addQueryClause(clauseT);
        if (!this.makeQuery())
            result = SATSolver.FALSE;
        else {
            this.clearQueryClauses();
            let clauseF = [-literal];
            this.addQueryClause(clauseF);
            if (!this.makeQuery())
                result = SATSolver.TRUE;
        }
        this.clearQueryClauses();
        return result;
    }
}

// Liar and truth-teller example test code:
let clauses = [[-1, -2], [2, 1], [-2, -3], [3, 2], [-3, -1], [-3, -2], [1, 2, 3]];
let s = new SATSolver();
for (let i = 0; i < clauses.length; i++) {
    s.addClause(clauses[i]);
}

console.log("Knowledge base is satisfiable: " + s.makeQuery());
console.log("Is Cal a truth-teller? ");

let result = s.testLiteral(2);
if (result === SATSolver.FALSE) {
    console.log("No.");
}

else if (result === SATSolver.TRUE) {
    console.log("Yes.");
}

else {
    console.log("Unknown.");
}


module.exports = SATSolver;